using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

/*
Copyright (C) 2010-2015, Huagati Systems Co., Ltd. - https://huagati.com

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

namespace HuagatiEDMXTools
{   
    /// <summary>
    /// Indicates if a scalar member is generated by the database (on insert = identity, insert+update = computed)
    /// </summary>
    public enum StoreGeneratedPatternEnum
    {
        /// <summary>
        /// Not database generated
        /// </summary>
        None,
        /// <summary>
        /// Generated by the database when inserting a new record
        /// </summary>
        Identity,
        /// <summary>
        /// Computed or updated by the database on insert and update
        /// </summary>
        Computed
    }

    /// <summary>
    /// Type of backing store entity: Table or View
    /// </summary>
    public enum StoreTypeEnum
    {
        /// <summary>
        /// Store type is unknown
        /// </summary>
        Unknown,
        /// <summary>
        /// Entity set is backed by a table
        /// </summary>
        Table,
        /// <summary>
        /// Entity set is backed by a view
        /// </summary>
        View
    }

    /// <summary>
    /// Multiplicity for associations
    /// </summary>
    public enum MultiplicityTypeEnum
    {
        /// <summary>
        /// Unknown multiplicity
        /// </summary>
        Unknown,
        /// <summary>
        /// Zero or one
        /// </summary>
        ZeroOrOne,
        /// <summary>
        /// Exactly one
        /// </summary>
        One,
        /// <summary>
        /// Zero or more
        /// </summary>
        Many
    }

    /// <summary>
    /// Member protection level; public, internal, protected, or private
    /// </summary>
    public enum AccessModifierEnum
    {
        /// <summary>
        /// Public member
        /// </summary>
        Public,
        /// <summary>
        /// Internal member
        /// </summary>
        Internal,
        /// <summary>
        /// Protected member
        /// </summary>
        Protected,
        /// <summary>
        /// Private member
        /// </summary>
        Private
    }

    /// <summary>
    /// Function or stored procedure parameter mode; input, output or bidirectional
    /// </summary>
    public enum ParameterModeEnum
    {
        /// <summary>
        /// Input parameter
        /// </summary>
        In,
        /// <summary>
        /// Output parameter
        /// </summary>
        Out,
        /// <summary>
        /// Bidirectional (input and output) parameter
        /// </summary>
        InOut
    }

    /// <summary>
    /// Controls how function overloads are resolved. The default is AllowImplicitConversion
    /// </summary>
    public enum ParameterTypeSemanticsEnum
    {
        /// <summary>
        /// Allow implicit conversion
        /// </summary>
        AllowImplicitConversion,
        /// <summary>
        /// Allow implicit promotion
        /// </summary>
        AllowImplicitPromotion,
        /// <summary>
        /// Exact matches only
        /// </summary>
        ExactMatchOnly
    }

    /// <summary>
    /// Type of inheritance strategy used
    /// </summary>
    public enum EDMXInheritanceStrategyEnum
    {
        /// <summary>
        /// No inheritance strategy chosen
        /// </summary>
        None,
        /// <summary>
        /// Table per type
        /// </summary>
        TPT,
        /// <summary>
        /// Table per hierarchy
        /// </summary>
        TPH,
        /// <summary>
        /// Table per concrete type
        /// </summary>
        TPC,
        /// <summary>
        /// Mixed - choose when generating model
        /// </summary>
        Mixed
    }
}
